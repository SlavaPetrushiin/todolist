{"version":3,"sources":["serviceWorker.js","Component/AddNewItemForm.tsx","Component/TodoListFooter.tsx","Component/TodoListTask.tsx","Component/TodoListTasks.tsx","Component/TodoListTitle.tsx","Dal/api.ts","types/actions.ts","Redux/reducer.ts","Component/TodoList.tsx","App.tsx","Redux/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddNewItemForm","state","error","title","onAddItemClick","text","_this","setState","props","addItem","handleClick","event","word","target","value","trimLeft","handleEnter","key","render","classForInput","react_default","a","createElement","className","type","placeholder","onChange","onKeyPress","onClick","React","Component","TodoListFooter","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTask","addMode","task","activeEditMode","deactivateEditMode","changeTask","id","onIsDoneChanged","status","currentTarget","checked","onTitleChanged","handleDeleteTask","deleteTask","handleChangeSelect","priority","classForTask","autoFocus","onBlur","Fragment","selected","TodoListTasks","tasksElements","tasks","map","Component_TodoListTask","length","TodoListTitle","activateEditMode","newTitleList","changeTitleList","this","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","get","then","response","data","post","item","todoListId","delete","concat","resultCode","newTitle","put","items","newTitleTask","taskId","updateTask","ADD_TASK","initialState","todoLists","errorMessage","ToDoList","addTask","createTaskThunkCreator","obj","changeUserTask","find","TodoList_objectSpread","updateTaskThunkCreator","newFilterValue","filterTasks","deleteTaskThunkCreator","deleteToDoList","deleteToDoListThunkCreator","updateTitleToDoListThunkCreator","getTasksThunkCreator","filter","Component_TodoListTitle","Component_AddNewItemForm","Component_TodoListTasks","Component_TodoListFooter","TodoListContainer","connect","todoListsPage","dispatch","setTasks","newTask","updatedTask","App","addToDoList","createToDoListThunkCreator","getToDolistThunkCreator","list","Component_TodoList","ConnectedApp","todoList","newToDolist","rootReducer","combineReducers","arguments","undefined","action","_objectSpread","Object","toConsumableArray","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d92e89a5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./Style/AddNewItemForm.css\";\r\n\r\ninterface IProps {\r\n    addItem: Function;\r\n}\r\n\r\ninterface IState {\r\n    error: boolean;\r\n    title: string;\r\n}\r\n\r\nclass AddNewItemForm extends React.Component<IProps, IState> {\r\n    state = {\r\n        error: false,\r\n        title: \"\"\r\n    };\r\n\r\n    onAddItemClick = () => {\r\n        let text = this.state.title;\r\n\r\n        if (text === \"\") {\r\n            this.setState({error: true});\r\n        } else {\r\n            this.setState({error: false, title: \"\"});\r\n            this.props.addItem(text);\r\n        }\r\n    };\r\n\r\n    handleClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        let word = event.target.value.trimLeft();\r\n        this.setState({error: false, title: word});\r\n    };\r\n\r\n    handleEnter = (event: React.KeyboardEvent) => {\r\n        if (event.key === \"Enter\") {\r\n            this.onAddItemClick();\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n        let classForInput = this.state.error ? \"error\" : \"\";\r\n        return (\r\n            <div className=\"todoList-newTaskForm\">\r\n                <input\r\n                    value={this.state.title}\r\n                    type=\"text\"\r\n                    placeholder=\"New task name\"\r\n                    className={(classForInput + ' ' + 'inputList')}\r\n                    onChange={this.handleClick}\r\n                    onKeyPress={this.handleEnter}\r\n                />\r\n                <button className=\"button\" onClick={this.onAddItemClick}><span>Add</span></button>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default AddNewItemForm;\r\n","import React from \"react\";\r\nimport \"./Style/TodoListFooter.css\";\r\n\r\ninterface IProps {\r\n    changeFilter: Function;\r\n    filterValue: string;\r\n}\r\n\r\n\r\nclass TodoListFooter extends React.Component<IProps> {\r\n    onAllFilterClick = () => {\r\n        this.props.changeFilter(\"All\");\r\n    };\r\n\r\n    onCompletedFilterClick = () => {\r\n        this.props.changeFilter(\"Completed\");\r\n    };\r\n\r\n    onActiveFilterClick = () => {\r\n        this.props.changeFilter(\"Active\");\r\n    };\r\n\r\n    render = () => {\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\r\n        return (\r\n            <div className=\"todoList-footer\">\r\n                <div>\r\n                    <button onClick={this.onAllFilterClick}\r\n                            className={classForAll + ' ' + 'buttonSort' + ' ' + 'buttonSort1'}>\r\n                        All\r\n                    </button>\r\n                    <button\r\n                        onClick={this.onCompletedFilterClick}\r\n                        className={classForCompleted + ' ' + 'buttonSort' + ' ' + 'buttonSort1'}\r\n                    >\r\n                        Completed\r\n                    </button>\r\n                    <button\r\n                        onClick={this.onActiveFilterClick}\r\n                        className={classForActive + ' ' + 'buttonSort' + ' ' + 'buttonSort1'}\r\n                    >\r\n                        Active\r\n                    </button>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default TodoListFooter;\r\n","import React from \"react\";\r\nimport {ITask} from \"../Redux/interfaces\";\r\nimport \"./Style/TodoListTask.css\";\r\n\r\ninterface IProps {\r\n    key: string;\r\n    task: ITask;\r\n    changeTask: Function;\r\n    deleteTask: Function;\r\n};\r\n\r\ninterface IState {\r\n    addMode: boolean;\r\n    title: string;\r\n}\r\n\r\n\r\nclass TodoListTask extends React.Component<IProps, IState> {\r\n    state = {\r\n        addMode: false,\r\n        title: this.props.task.title\r\n    };\r\n\r\n    activeEditMode = () => {\r\n        //активация поля ввода на таске\r\n        this.setState({addMode: true});\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        //деактивация поля ввода на таске\r\n        this.setState({addMode: false});\r\n        this.props.changeTask(this.props.task.id, {title: this.state.title});\r\n    };\r\n\r\n    //изменение чекбокса\r\n    onIsDoneChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        let status = event.currentTarget.checked ? 2 : 0;\r\n        this.props.changeTask(\r\n            this.props.task.id, //id таски\r\n            {status}\r\n        );\r\n    };\r\n\r\n    //изменение глобальной таски по изменению инпута\r\n    onTitleChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        let title = event.currentTarget.value;\r\n        this.setState({title});\r\n    };\r\n\r\n    handleDeleteTask = () => {\r\n        this.props.deleteTask(this.props.task.id);\r\n    };\r\n\r\n    handleChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        let priority;\r\n        switch (event.target.value) {\r\n            case \"Low\":\r\n                priority = 0;\r\n                break;\r\n            case \"Middle\":\r\n                priority = 1;\r\n                break;\r\n            case \"Hi\":\r\n                priority = 2;\r\n                break;\r\n            case \"Urgently\":\r\n                priority = 3;\r\n                break;\r\n            case \"Later\":\r\n                priority = 4;\r\n                break;\r\n        }\r\n        this.props.changeTask(\r\n            this.props.task.id, //id таски\r\n            {priority}\r\n        );\r\n    }\r\n\r\n    render = () => {\r\n\r\n        let status = this.props.task.status === 2 ? true : false;\r\n        let classForTask = status ? \"done\" : \"\";\r\n        let priority;\r\n        switch (this.props.task.priority) {\r\n            case 0:\r\n                priority = \"Low\";\r\n                break;\r\n            case 1:\r\n                priority = \"Middle\";\r\n                break;\r\n            case 2:\r\n                priority = \"Hi\";\r\n                break;\r\n            case 3:\r\n                priority = \"Urgently\";\r\n                break;\r\n            case 4:\r\n                priority = \"Later\";\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className=\"todoList-task\">\r\n                 <input\r\n                    type=\"checkbox\"\r\n                    checked={status}\r\n                    onChange={this.onIsDoneChanged}\r\n                    className={classForTask + ' ' + 'my-flex-box' + ' ' + 'custom-checkbox'}\r\n                />\r\n                {this.state.addMode ? (\r\n                    <input\r\n                        type=\"text\"\r\n                        value={this.state.title}\r\n                        autoFocus={true}\r\n                        onBlur={this.deactivateEditMode}\r\n                        onChange={this.onTitleChanged}\r\n                        className={'my-flex-box'}\r\n                    />\r\n                ) : (\r\n                    <>\r\n                        <span className={classForTask + ' ' + 'my-flex-box'} onClick={this.activeEditMode}>\r\n                          {this.state.title}, {priority}\r\n                        </span>\r\n                        <select value={priority} onChange={this.handleChangeSelect} className={'my-flex-box'}>\r\n                            <option value=\"Low\">Low</option>\r\n                            <option value=\"Middle\">Middle</option>\r\n                            <option selected value=\"Hi\">Hi</option>\r\n                            <option value=\"Urgently\">Urgently</option>\r\n                            <option value=\"Later\">Later</option>\r\n                        </select>\r\n                        <span onClick={this.handleDeleteTask} className={'my-flex-box' + ' ' + 'del-task'}>\r\n                          &#10008;\r\n                        </span>\r\n                    </>\r\n                )}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default TodoListTask;\r\n","import React from \"react\";\r\nimport TodoListTask from \"./TodoListTask\";\r\nimport {ITask} from \"../Redux/interfaces\";\r\n\r\ninterface IProps{\r\n  tasks: Array<ITask>;\r\n  changeTask : Function;\r\n  deleteTask : Function;\r\n};\r\n\r\nclass TodoListTasks extends React.Component<IProps> {\r\n  render = () => {\r\n    const tasksElements = this.props.tasks.map((task : ITask) => {\r\n      return (\r\n        <TodoListTask\r\n          key={task.id}\r\n          task={task}\r\n          changeTask={this.props.changeTask}\r\n          deleteTask={this.props.deleteTask}\r\n        />\r\n      );\r\n    });\r\n    return tasksElements.length !== 0 ? (\r\n      <div className=\"todoList-tasks\">{tasksElements}</div>\r\n    ) : null;\r\n  };\r\n}\r\n\r\nexport default TodoListTasks;\r\n","import React from \"react\";\r\nimport \"./Style/TodoListTitle.css\";\r\n\r\ninterface IProps{\r\n  title : string;\r\n  changeTitleList : Function;\r\n}\r\n\r\ninterface IState{\r\n  addMode: boolean;\r\n  title: string;\r\n}\r\n\r\nclass TodoListTitle extends React.Component<IProps, IState> {\r\n  state = {\r\n    addMode: false,\r\n    title: this.props.title\r\n  };\r\n\r\n  activateEditMode = () => this.setState({ addMode: true });\r\n\r\n  deactivateEditMode = () => {\r\n    this.setState({ addMode: false });\r\n    let newTitleList = this.state.title;\r\n    this.props.changeTitleList(newTitleList); //передаю наверх новый тайтл\r\n  };\r\n\r\n  onTitleChanged = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n    let title = event.currentTarget.value;\r\n    this.setState({ title });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"headerTitle\">\r\n        {this.state.addMode ? (\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.title}\r\n            onBlur={this.deactivateEditMode}\r\n            onChange={this.onTitleChanged}\r\n          />\r\n        ) : (\r\n          <h3\r\n            className=\"todoList-header__title\"\r\n            onClick={this.activateEditMode}\r\n          >\r\n            {this.state.title}\r\n          </h3>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoListTitle;\r\n","import {\r\n    IDeletedToDoList,\r\n    IResCreateToDoList, IResGetTasks,\r\n    ITask,\r\n    ITodoList,\r\n    IUpdateTitleToDoList\r\n} from \"../Redux/interfaces\";\r\nimport axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"c42da93b-73d1-47c9-9b91-cb5950b4c7d5\"}\r\n});\r\n\r\nexport const api = {\r\n    getToDoLists(): Promise<Array<ITodoList>> {\r\n        return instance.get<Array<ITodoList>>('')\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n\r\n    createToDoList(text: string) : Promise<ITodoList> {\r\n        return instance.post<IResCreateToDoList>(\"\", {title: text}).then(response => {\r\n            let todoList = response.data.data.item;\r\n            return todoList\r\n        });\r\n        ;\r\n    },\r\n\r\n    deleteToDoList(todoListId: string) : Promise<number> {\r\n        return instance.delete<IDeletedToDoList>(`/${todoListId}`).then(response => {\r\n            return response.data.resultCode;\r\n        });\r\n    },\r\n\r\n    updateTitleToDoList(newTitle: string, todoListId: string) : Promise<IUpdateTitleToDoList> {\r\n        return instance.put<IUpdateTitleToDoList>(`/${todoListId}`, {title: newTitle}).then(response => {\r\n            return response.data\r\n        });;\r\n    },\r\n\r\n    getTasks(todoListId: string) : Promise<ITask[]> {\r\n        return instance.get<IResGetTasks>(`/${todoListId}/tasks`).then(response => {\r\n\r\n            return response.data.items;\r\n        });\r\n    },\r\n\r\n    createTask(newTitleTask: string, todoListId: string) : Promise<ITask>{\r\n        return instance.post(`/${todoListId}/tasks`, {title: newTitleTask}).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n\r\n                return response.data.data.item\r\n            }\r\n        });\r\n    },\r\n\r\n    deleteTask(taskId: string, todoListId: string) : Promise<number> {\r\n        return instance.delete(`/${todoListId}/tasks/${taskId}`).then(response => {\r\n            return response.data.resultCode\r\n        });\r\n    },\r\n\r\n    updateTask(updateTask: ITask, taskId: string, todoListId: string) : Promise<ITask> {\r\n        return instance.put(`/${todoListId}/tasks/${taskId}`, updateTask).then(response => {\r\n            return response.data.data.item\r\n        });\r\n    }\r\n};\r\n","export const ADD_TODOLIST = \"TodoList/Reducer/ADD-TODOLIST\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const CHANGE_TASK = \"TodoList/Reducer/CHANGE-TASK\";\r\nexport const FILTER_TASK = \"TodoList/Reducer/FILTER-TASK\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const SET_TODOLIST = \"TodoList/Reducer/SET-TODOLIST\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET-TASKS\";\r\nexport const ERROR = \"TodoList/Reducer/ERROR\";\r\nexport const CHANGE_TITLE_LIST = \"TodoList/Reducer/CHANGE_TITLE_LIST\";\r\n\r\n//interface для каждого actionCreator\r\n\r\nexport interface IAddTodolist {\r\n    type : typeof ADD_TODOLIST; //type будет строкой \"TodoList/Reducer/ADD-TODOLIST\"\r\n    newToDolist : any\r\n};\r\n\r\nexport interface IAddTask {\r\n    type : typeof ADD_TASK;\r\n    newTask : any;\r\n    todoListId : string;\r\n};\r\n\r\nexport interface IChangeTask {\r\n    type : typeof CHANGE_TASK;\r\n    updatedTask : any\r\n};\r\n\r\nexport interface IFilterTasks {\r\n    type : typeof FILTER_TASK;\r\n    newFilterValue : string;\r\n    todoListId : string;\r\n};\r\n\r\nexport interface IDeleteTask {\r\n    type : typeof DELETE_TASK;\r\n    taskId : string;\r\n    todoListId : string;\r\n};\r\n\r\nexport interface IDeleteToDoList {\r\n    type : typeof DELETE_TODOLIST;\r\n    todoListId : string;\r\n};\r\n\r\nexport interface ISetToDoList {\r\n    type : typeof SET_TODOLIST;\r\n    todoLists : any[];\r\n};\r\n\r\nexport interface ISetTasks {\r\n    type : typeof SET_TASKS;\r\n    tasks : any[];\r\n    todoListId : string;\r\n};\r\n\r\nexport interface IChangeTitleList {\r\n    type : typeof CHANGE_TITLE_LIST;\r\n    newTitle : string;\r\n    todoListId : string\r\n};\r\n\r\nexport interface IError {\r\n    type: typeof ERROR\r\n};\r\n\r\n// Собираю все interface для reducer\r\nexport type allActionTypes =\r\n    | IAddTodolist\r\n    | IAddTask\r\n    | IChangeTask\r\n    | IFilterTasks\r\n    | IDeleteTask\r\n    | IDeleteToDoList\r\n    | ISetToDoList\r\n    | ISetTasks\r\n    | IChangeTitleList\r\n    | IError\r\n\r\n\r\n","import {api} from \"../Dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    allActionTypes,\r\n    ADD_TASK,\r\n    ADD_TODOLIST,\r\n    CHANGE_TASK,\r\n    CHANGE_TITLE_LIST,\r\n    DELETE_TASK,\r\n    DELETE_TODOLIST,\r\n    FILTER_TASK,\r\n    SET_TASKS,\r\n    SET_TODOLIST,\r\n    IAddTodolist,\r\n    IAddTask,\r\n    IChangeTask,\r\n    IFilterTasks,\r\n    IDeleteTask,\r\n    IDeleteToDoList,\r\n    ISetToDoList,\r\n    ISetTasks,\r\n    IChangeTitleList,\r\n} from \"../types/actions\";\r\nimport {\r\n    ITask,\r\n    ITodoList,\r\n    IUpdateTitleToDoList\r\n} from \"./interfaces\";\r\n\r\ninterface IState {\r\n    todoLists: Array<ITodoList>;\r\n    errorMessage: boolean;\r\n}\r\n\r\nconst initialState: IState = {\r\n    todoLists: [],\r\n    errorMessage: false\r\n};\r\n\r\nexport const toDoListReducer = (\r\n    state = initialState,\r\n    action: allActionTypes\r\n) => {\r\n    switch (action.type) {\r\n        // case ERROR:\r\n        //     return {\r\n        //         ...state,\r\n        //         errorMessage: true\r\n        //     };\r\n\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todoLists: [\r\n                    ...state.todoLists,\r\n                    {...action.newToDolist, tasks: [], filterValue: \"All\"}\r\n                ]\r\n            };\r\n\r\n        case CHANGE_TITLE_LIST:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.todoListId) {\r\n                        ;\r\n                        return {...todoList, title: action.newTitle};\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case ADD_TASK: //Добавление новых тасок в лист\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.todoListId) {\r\n                        return {...todoList, tasks: [...todoList.tasks, action.newTask]};\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_TASK:\r\n            ;\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.updatedTask.todoListId) {\r\n                        return {\r\n                            ...todoList, //\t1 ищем совпадение листа\r\n                            tasks: todoList.tasks.map((task: any) => {\r\n                                if (task.id === action.updatedTask.id) {\r\n                                    return {...task, ...action.updatedTask};\r\n                                } else {\r\n                                    return task;\r\n                                }\r\n                            })\r\n                        };\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case FILTER_TASK:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.todoListId) {\r\n                        return {...todoList, filterValue: action.newFilterValue};\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.todoListId) {\r\n                        return {\r\n                            ...todoList, //\t1 ищем совпадение листа\r\n                            tasks: todoList.tasks.filter((task: any) => {\r\n                                return task.id !== action.taskId;\r\n                            })\r\n                        };\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.filter(list => list.id !== action.todoListId)\r\n            };\r\n        case SET_TODOLIST:\r\n            let todoLists = action.todoLists.map((todoList: ITodoList) => {\r\n                return {\r\n                    ...todoList,\r\n                    tasks: [],\r\n                    filterValue: \"All\"\r\n                };\r\n            });\r\n            return {\r\n                ...state,\r\n                todoLists: todoLists\r\n            };\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.todoListId) {\r\n                        return {\r\n                            ...todoList,\r\n                            tasks: [...todoList.tasks, ...action.tasks]\r\n                        };\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//ActionCreater\r\nexport const addTodolist = (newToDolist: ITodoList): IAddTodolist => ({\r\n    type: ADD_TODOLIST,\r\n    newToDolist\r\n});\r\nexport const addTask = (newTask: ITask, todoListId: string): IAddTask => ({\r\n    type: ADD_TASK,\r\n    newTask,\r\n    todoListId\r\n});\r\nexport const changeTask = (updatedTask: ITask): IChangeTask => ({\r\n    type: CHANGE_TASK,\r\n    updatedTask\r\n});\r\nexport const filterTasks = (\r\n    newFilterValue: string,\r\n    todoListId: string\r\n): IFilterTasks => ({type: FILTER_TASK, newFilterValue, todoListId});\r\nexport const deleteTask = (\r\n    taskId: string,\r\n    todoListId: string\r\n): IDeleteTask => ({type: DELETE_TASK, taskId, todoListId});\r\nexport const deleteToDoList = (todoListId: string): IDeleteToDoList => ({\r\n    type: DELETE_TODOLIST,\r\n    todoListId\r\n});\r\nexport const setToDoList = (todoLists: Array<ITodoList>): ISetToDoList => ({\r\n    type: SET_TODOLIST,\r\n    todoLists\r\n});\r\nexport const setTasks = (\r\n    tasks: Array<ITask>,\r\n    todoListId: string\r\n): ISetTasks => ({type: SET_TASKS, tasks, todoListId});\r\nexport const changeTitleList = (\r\n    newTitle: string,\r\n    todoListId: string\r\n): IChangeTitleList => ({type: CHANGE_TITLE_LIST, newTitle, todoListId});\r\n\r\n\r\n//thunk\r\nexport const getToDolistThunkCreator = () => (dispatch: Dispatch): void => {\r\n    api.getToDoLists()\r\n        .then((response: Array<ITodoList>) => {\r\n            dispatch(setToDoList(response));\r\n        });\r\n};\r\n\r\nexport const createToDoListThunkCreator = (title: string) => (dispatch: Dispatch): void => {\r\n    api.createToDoList(title)\r\n        .then((todoList: ITodoList) => {\r\n            dispatch(addTodolist(todoList));\r\n        });\r\n};\r\n\r\nexport const deleteToDoListThunkCreator = (todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.deleteToDoList(todoListId)\r\n        .then(resultCode => {\r\n            if (resultCode === 0) {\r\n                dispatch(deleteToDoList(todoListId));\r\n            }\r\n        });\r\n};\r\n\r\nexport const updateTitleToDoListThunkCreator = (title: string, todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.updateTitleToDoList(title, todoListId)\r\n        .then((response: IUpdateTitleToDoList) => {\r\n            dispatch(changeTitleList(title, todoListId));\r\n        });\r\n};\r\n\r\nexport const getTasksThunkCreator = (todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.getTasks(todoListId).then(tasks => {\r\n        dispatch(setTasks(tasks, todoListId));\r\n    });\r\n};\r\n\r\nexport const createTaskThunkCreator = (newTitleTask: string, todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.createTask(newTitleTask, todoListId)\r\n        .then(response => {\r\n            dispatch(addTask(response, todoListId));\r\n        });\r\n};\r\n\r\nexport const deleteTaskThunkCreator = (taskId: string, todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.deleteTask(taskId, todoListId)\r\n        .then((resultCode) => {\r\n            if (resultCode === 0) {\r\n                dispatch(deleteTask(taskId, todoListId));\r\n            }\r\n        });\r\n};\r\n\r\nexport const updateTaskThunkCreator = (updateTask: ITask, taskId: string, todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.updateTask(updateTask, taskId, todoListId)\r\n        .then((task) => {\r\n            dispatch(changeTask(task));\r\n        });\r\n};\r\n\r\n","import React from \"react\";\r\nimport \"./../App.css\";\r\nimport \"./Style/TodoList.css\";\r\nimport TodoListFooter from \"./TodoListFooter\";\r\nimport TodoListTasks from \"./TodoListTasks\";\r\nimport TodoListTitle from \"./TodoListTitle\";\r\nimport {connect} from \"react-redux\";\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport {\r\n    filterTasks,\r\n    createTaskThunkCreator, deleteTaskThunkCreator,\r\n    deleteToDoListThunkCreator,\r\n    getTasksThunkCreator, updateTaskThunkCreator,\r\n    updateTitleToDoListThunkCreator\r\n} from \"../Redux/reducer\";\r\nimport {RootState} from \"../Redux/store\";\r\nimport {IObjChangeTask, ITask} from \"../Redux/interfaces\";\r\n\r\ninterface IProps {\r\n    id : string;\r\n    title : string;\r\n    key : string;\r\n    tasks : Array<ITask>;\r\n    filterValue : string;\r\n};\r\n\r\ninterface IMapStateToProps {\r\n    errorMessage : boolean\r\n}\r\n\r\ninterface IDispatchStateToProps {\r\n    filterTasks : (newFilterValue : string, todoListId : string) => void;\r\n    deleteToDoListThunkCreator : (todoListId : string) => void;\r\n    updateTitleToDoListThunkCreator : (newTitle : string, todoListId : string) => void;\r\n    getTasksThunkCreator : (todoListId : string) => void;\r\n    createTaskThunkCreator : (newTitleTask: string, todoListId : string) => void;\r\n    deleteTaskThunkCreator : (taskId : string, todoListId : string) => void;\r\n    updateTaskThunkCreator : (updatedTask : ITask, taskId : string, todoListId : string) => void;\r\n}\r\n\r\nclass ToDoList extends React.Component<IProps & IMapStateToProps & IDispatchStateToProps> {\r\n    componentDidMount() {\r\n        let todoListId = this.props.id;\r\n        this.props.getTasksThunkCreator(todoListId);\r\n    }\r\n\r\n    addTask = (newTitleTask : string) => {\r\n        let todoListId = this.props.id;\r\n        this.props.createTaskThunkCreator(newTitleTask, todoListId);\r\n    };\r\n\r\n    changeTask = (taskId : string, obj : IObjChangeTask) => {\r\n        let todoListId = this.props.id;\r\n        let changeUserTask = this.props.tasks.find((task: ITask) => task.id === taskId);\r\n        if(changeUserTask) {\r\n            let updateTask = {\r\n                ...changeUserTask,\r\n                ...obj\r\n            };\r\n            this.props.updateTaskThunkCreator(updateTask, taskId, todoListId);\r\n        }\r\n    };\r\n\r\n    changeFilter = (newFilterValue : string) => {\r\n        let todoListId = this.props.id;\r\n        this.props.filterTasks(newFilterValue, todoListId);\r\n    };\r\n\r\n    deleteTask = (taskId : string) => {\r\n        let todoListId = this.props.id;\r\n        this.props.deleteTaskThunkCreator(taskId, todoListId);\r\n    };\r\n\r\n    deleteToDoList = () => {\r\n        let todoListId = this.props.id;\r\n        this.props.deleteToDoListThunkCreator(todoListId);\r\n    };\r\n\r\n    changeTitleList = (newTitleList : string) => {\r\n        let todoListId = this.props.id;\r\n        this.props.updateTitleToDoListThunkCreator(newTitleList, todoListId);\r\n    };\r\n\r\n    render() {\r\n        const getFilterTasks = (tasks : Array<ITask>, filter : string) => {\r\n            return tasks.filter((task : ITask) => {\r\n                switch (filter) {\r\n                    case \"All\":\r\n                        return true;\r\n                    case \"Completed\":\r\n                        return task.status === 2;\r\n                    case \"Active\":\r\n                        return task.status === 0;\r\n                }\r\n            });\r\n        };\r\n\r\n        let errorMessage = this.props.errorMessage && \"Error\"; //вывожу ошибку по запросам\r\n\r\n        return (\r\n            <div className=\"wrapper_todoList\">\r\n                <div className=\"todoList\">\r\n                    <div className='wrapper_deleted' onClick={this.deleteToDoList}>\r\n                        &#10008;\r\n                    </div>\r\n                    <header className=\"header\">\r\n                        <TodoListTitle\r\n                            title={this.props.title}\r\n                            changeTitleList={this.changeTitleList}\r\n                        />\r\n                        <AddNewItemForm addItem={this.addTask}/>\r\n                    </header>\r\n                    <TodoListTasks\r\n                        tasks={getFilterTasks(this.props.tasks, this.props.filterValue)}\r\n                        changeTask={this.changeTask}\r\n                        deleteTask={this.deleteTask}\r\n                    />\r\n                    <TodoListFooter\r\n                        changeFilter={this.changeFilter}\r\n                        filterValue={this.props.filterValue}\r\n                    />\r\n                </div>\r\n                {errorMessage}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state : RootState) : IMapStateToProps => {\r\n    return {\r\n        errorMessage: state.todoListsPage.errorMessage\r\n    };\r\n};\r\n\r\nconst TodoListContainer = connect(\r\n    mapStateToProps,\r\n    {\r\n        filterTasks, deleteToDoListThunkCreator, updateTitleToDoListThunkCreator,\r\n        getTasksThunkCreator, createTaskThunkCreator,  deleteTaskThunkCreator, updateTaskThunkCreator\r\n    }\r\n)(ToDoList);\r\n\r\nexport default TodoListContainer;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport AddNewItemForm from \"./Component/AddNewItemForm\";\r\nimport TodoList from \"./Component/TodoList\";\r\nimport { connect } from \"react-redux\";\r\nimport { createToDoListThunkCreator, getToDolistThunkCreator} from \"./Redux/reducer\";\r\nimport {RootState} from \"./Redux/store\";\r\nimport {ITodoList} from \"./Redux/interfaces\";\r\n\r\ninterface IStateToProps {\r\n  todoLists : Array<ITodoList>;\r\n}\r\n\r\ninterface IDispatchToProps {\r\n  getToDolistThunkCreator : () => void;\r\n  createToDoListThunkCreator : (title : string) => void;\r\n}\r\n\r\n\r\nclass App extends React.Component<IStateToProps & IDispatchToProps> {\r\n  componentDidMount() {\r\n    this.props.getToDolistThunkCreator()\r\n  }\r\n\r\n  addToDoList = (title : string) => {\r\n    this.props.createToDoListThunkCreator(title)\r\n  };\r\n\r\n  render() {\r\n    let todoLists = this.props.todoLists.map((list: ITodoList) => (\r\n      <TodoList\r\n        id={list.id}\r\n        title={list.title}\r\n        key={list.id}\r\n        tasks={list.tasks}\r\n        filterValue={list.filterValue}\r\n      />\r\n    ));\r\n\r\n    return (\r\n      <div className={'wrapper'}>\r\n        <AddNewItemForm addItem={this.addToDoList} />\r\n        <div className=\"App\">{todoLists}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state : RootState) => {\r\n  return {\r\n    todoLists: state.todoListsPage.todoLists\r\n  };\r\n};\r\n\r\n\r\n\r\nconst ConnectedApp = connect(mapStateToProps, {getToDolistThunkCreator, createToDoListThunkCreator})(App);\r\n\r\nexport default ConnectedApp;\r\n","import {createStore, combineReducers, applyMiddleware} from \"redux\";\r\nimport { toDoListReducer } from \"./reducer\";\r\nimport thunk, {ThunkMiddleware} from \"redux-thunk\";\r\nimport {allActionTypes} from \"../types/actions\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todoListsPage: toDoListReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk as ThunkMiddleware<RootState, allActionTypes>));\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport ConnectedApp from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./Redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ConnectedApp />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}