{"version":3,"sources":["serviceWorker.js","Component/AddNewItemForm.tsx","Component/TodoListFooter.tsx","Component/TodoListTask.tsx","Component/TodoListTasks.tsx","Component/TodoListTitle.tsx","Dal/api.ts","types/actions.ts","Dal/apiAuthorization.ts","Redux/reducer.ts","Component/TodoList.tsx","Component/LoginForm.tsx","App.tsx","Redux/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddNewItemForm","state","error","title","onAddItemClick","text","_this","setState","props","addItem","handleClick","event","word","target","value","trimLeft","handleEnter","key","render","react_default","a","createElement","className","TextField","variant","label","onChange","onKeyPress","IconButton","onClick","ControlPoint","React","Component","TodoListFooter","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","classForAll","filterValue","classForCompleted","classForActive","Button","color","TodoListTask","addMode","task","activeEditMode","deactivateEditMode","changeTask","id","onIsDoneChanged","status","currentTarget","checked","onTitleChanged","handleDeleteTask","deleteTask","handleChangeSelect","priority","classForTask","Checkbox","autoFocus","onBlur","Fragment","selected","Delete","TodoListTasks","tasksElements","tasks","map","Component_TodoListTask","length","TodoListTitle","activateEditMode","newTitleList","changeTitleList","this","type","Typography","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","get","then","response","data","post","item","todoListId","delete","concat","resultCode","newTitle","put","items","newTitleTask","taskId","updateTask","ADD_TASK","apiAuthorization","email","password","rememberMe","captcha","arguments","undefined","initialState","todoLists","errorMessage","authorization","ToDoList","addTask","createTaskThunkCreator","obj","changeUserTask","find","TodoList_objectSpread","updateTaskThunkCreator","newFilterValue","filterTasks","deleteTaskThunkCreator","deleteToDoList","deleteToDoListThunkCreator","updateTitleToDoListThunkCreator","getTasksThunkCreator","filter","Card","CardContent","Component_TodoListTitle","Component_AddNewItemForm","Component_TodoListTasks","Component_TodoListFooter","TodoListContainer","connect","todoListsPage","dispatch","setTasks","newTask","updatedTask","LoginForm","onHandleSubmit","e","preventDefault","_this$state","authorizationUser","_this$state2","disabledBtn","Grid","container","sm","xs","onSubmit","defaultValue","disabled","App","addToDoList","createToDoListThunkCreator","prevProps","prevState","getToDolistThunkCreator","list","Component_TodoList","AppBar","position","Toolbar","edge","aria-label","Menu_default","Container","maxWidth","Component_LoginForm","ConnectedApp","todoList","newToDolist","rootReducer","combineReducers","action","_objectSpread","Object","toConsumableArray","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0404021.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./Style/AddNewItemForm.css\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { ControlPoint } from \"@material-ui/icons\";\r\n\r\ninterface IProps {\r\n\taddItem: Function;\r\n}\r\n\r\ninterface IState {\r\n\terror: boolean;\r\n\ttitle: string;\r\n}\r\n\r\nclass AddNewItemForm extends React.Component<IProps, IState> {\r\n\tstate = {\r\n\t\terror: false,\r\n\t\ttitle: \"\"\r\n\t};\r\n\r\n\tonAddItemClick = () => {\r\n\t\tlet text = this.state.title;\r\n\r\n\t\tif (text === \"\") {\r\n\t\t\tthis.setState({ error: true });\r\n\t\t} else {\r\n\t\t\tthis.setState({ error: false, title: \"\" });\r\n\t\t\tthis.props.addItem(text);\r\n\t\t}\r\n\t};\r\n\r\n\thandleClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tlet word = event.target.value.trimLeft();\r\n\t\tthis.setState({ error: false, title: word });\r\n\t};\r\n\r\n\thandleEnter = (event: React.KeyboardEvent) => {\r\n\t\tif (event.key === \"Enter\") {\r\n\t\t\tthis.onAddItemClick();\r\n\t\t}\r\n\t};\r\n\r\n\trender = () => {\r\n\t\treturn (\r\n\t\t\t<div className=\"todoList-newTaskForm\">\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tvariant={\"outlined\"}\r\n\t\t\t\t\tlabel={\"Type value\"}\r\n\t\t\t\t\tvalue={this.state.title}\r\n\t\t\t\t\terror={this.state.error}\r\n\t\t\t\t\tonChange={this.handleClick}\r\n\t\t\t\t\tonKeyPress={this.handleEnter}\r\n\t\t\t\t\tclassName={\"add-field\"}\r\n\t\t\t\t/>\r\n\t\t\t\t<IconButton\r\n\t\t\t\t\tonClick={this.onAddItemClick}\r\n\t\t\t\t>\r\n\t\t\t\t\t<ControlPoint />\r\n\t\t\t\t</IconButton>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n}\r\n\r\nexport default AddNewItemForm;\r\n","import React from \"react\";\r\nimport \"./Style/TodoListFooter.css\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\ninterface IProps {\r\n\tchangeFilter: Function;\r\n\tfilterValue: string;\r\n}\r\n\r\nclass TodoListFooter extends React.Component<IProps> {\r\n\tonAllFilterClick = () => {\r\n\t\tthis.props.changeFilter(\"All\");\r\n\t};\r\n\r\n\tonCompletedFilterClick = () => {\r\n\t\tthis.props.changeFilter(\"Completed\");\r\n\t};\r\n\r\n\tonActiveFilterClick = () => {\r\n\t\tthis.props.changeFilter(\"Active\");\r\n\t};\r\n\r\n\trender = () => {\r\n\t\tlet classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\r\n\t\tlet classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\r\n\t\tlet classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\r\n\t\treturn (\r\n\t\t\t<div className=\"todoList-footer\">\r\n\t\t\t\t<Button\r\n\t\t\t\t\tonClick={this.onAllFilterClick}\r\n\t\t\t\t\tvariant={classForAll ? 'contained' : 'text'}\r\n\t\t\t\t>\r\n\t\t\t\t\tAll\r\n        </Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tonClick={this.onCompletedFilterClick}\r\n\t\t\t\t\tcolor={\"primary\"}\r\n\t\t\t\t\tvariant={classForCompleted ? 'contained' : 'text'}\r\n\t\t\t\t>\r\n\t\t\t\t\tCompleted\r\n        </Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tonClick={this.onActiveFilterClick}\r\n\t\t\t\t\tcolor={\"secondary\"}\r\n\t\t\t\t\tvariant={classForActive ? 'contained' : 'text'}\r\n\t\t\t\t>\r\n\t\t\t\t\tActive\r\n        </Button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n}\r\n\r\nexport default TodoListFooter;\r\n","import React from \"react\";\r\nimport { ITask } from \"../Redux/interfaces\";\r\nimport { IconButton, Checkbox, TextField } from \"@material-ui/core\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport \"./Style/TodoList.css\";\r\n\r\ninterface IProps {\r\n\tkey: string;\r\n\ttask: ITask;\r\n\tchangeTask: Function;\r\n\tdeleteTask: Function;\r\n};\r\n\r\ninterface IState {\r\n\taddMode: boolean;\r\n\ttitle: string;\r\n}\r\n\r\n\r\nclass TodoListTask extends React.Component<IProps, IState> {\r\n\tstate = {\r\n\t\taddMode: false,\r\n\t\ttitle: this.props.task.title\r\n\t};\r\n\r\n\tactiveEditMode = () => {\r\n\t\t//активация поля ввода на таске\r\n\t\tthis.setState({ addMode: true });\r\n\t};\r\n\r\n\tdeactivateEditMode = () => {\r\n\t\t//деактивация поля ввода на таске\r\n\t\tthis.setState({ addMode: false });\r\n\t\tthis.props.changeTask(this.props.task.id, { title: this.state.title });\r\n\t};\r\n\r\n\t//изменение чекбокса\r\n\tonIsDoneChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tlet status = event.currentTarget.checked ? 2 : 0;\r\n\t\tthis.props.changeTask(\r\n\t\t\tthis.props.task.id, //id таски\r\n\t\t\t{ status }\r\n\t\t);\r\n\t};\r\n\r\n\t//изменение глобальной таски по изменению инпута\r\n\tonTitleChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tlet title = event.currentTarget.value;\r\n\t\tthis.setState({ title });\r\n\t};\r\n\r\n\thandleDeleteTask = () => {\r\n\t\tthis.props.deleteTask(this.props.task.id);\r\n\t};\r\n\r\n\thandleChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n\t\tlet priority;\r\n\t\tswitch (event.target.value) {\r\n\t\t\tcase \"Low\":\r\n\t\t\t\tpriority = 0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Middle\":\r\n\t\t\t\tpriority = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Hi\":\r\n\t\t\t\tpriority = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Urgently\":\r\n\t\t\t\tpriority = 3;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Later\":\r\n\t\t\t\tpriority = 4;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.props.changeTask(\r\n\t\t\tthis.props.task.id, //id таски\r\n\t\t\t{ priority }\r\n\t\t);\r\n\t}\r\n\r\n\trender = () => {\r\n\t\tlet status = this.props.task.status === 2 ? true : false;\r\n\t\tlet classForTask = status ? \"done\" : \"\";\r\n\t\tlet priority;\r\n\t\tswitch (this.props.task.priority) {\r\n\t\t\tcase 0:\r\n\t\t\t\tpriority = \"Low\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tpriority = \"Middle\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tpriority = \"Hi\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tpriority = \"Urgently\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tpriority = \"Later\";\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"todoList-task\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\tonChange={this.onIsDoneChanged}\r\n\t\t\t\t\t\tchecked={!!classForTask}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{this.state.addMode ? (\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tvalue={this.state.title}\r\n\t\t\t\t\t\t\tautoFocus={true}\r\n\t\t\t\t\t\t\tonBlur={this.deactivateEditMode}\r\n\t\t\t\t\t\t\tonChange={this.onTitleChanged}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t<span className={classForTask + ' ' + 'my-flex-box'} onClick={this.activeEditMode}>\r\n\t\t\t\t\t\t\t\t\t{this.state.title}, {priority}\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t<select value={priority} onChange={this.handleChangeSelect} className={'my-flex-box'}>\r\n\t\t\t\t\t\t\t\t\t<option value=\"Low\">Low</option>\r\n\t\t\t\t\t\t\t\t\t<option value=\"Middle\">Middle</option>\r\n\t\t\t\t\t\t\t\t\t<option selected value=\"Hi\">Hi</option>\r\n\t\t\t\t\t\t\t\t\t<option value=\"Urgently\">Urgently</option>\r\n\t\t\t\t\t\t\t\t\t<option value=\"Later\">Later</option>\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<IconButton onClick={this.handleDeleteTask}>\r\n\t\t\t\t\t<Delete />\r\n\t\t\t\t</IconButton>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n}\r\n\r\nexport default TodoListTask;\r\n","import React from \"react\";\r\nimport TodoListTask from \"./TodoListTask\";\r\nimport {ITask} from \"../Redux/interfaces\";\r\n\r\ninterface IProps{\r\n  tasks: Array<ITask>;\r\n  changeTask : Function;\r\n  deleteTask : Function;\r\n};\r\n\r\nclass TodoListTasks extends React.Component<IProps> {\r\n  render = () => {\r\n    const tasksElements = this.props.tasks.map((task : ITask) => {\r\n      return (\r\n        <TodoListTask\r\n          key={task.id}\r\n          task={task}\r\n          changeTask={this.props.changeTask}\r\n          deleteTask={this.props.deleteTask}\r\n        />\r\n      );\r\n    });\r\n    return tasksElements.length !== 0 ? (\r\n      <div className=\"todoList-tasks\">{tasksElements}</div>\r\n    ) : null;\r\n  };\r\n}\r\n\r\nexport default TodoListTasks;\r\n","import React from \"react\";\r\nimport \"./Style/TodoListTitle.css\";\r\nimport { Typography, TextField } from \"@material-ui/core\";\r\n\r\ninterface IProps {\r\n\ttitle: string;\r\n\tchangeTitleList: Function;\r\n}\r\n\r\ninterface IState {\r\n\taddMode: boolean;\r\n\ttitle: string;\r\n}\r\n\r\nclass TodoListTitle extends React.Component<IProps, IState> {\r\n\tstate = {\r\n\t\taddMode: false,\r\n\t\ttitle: this.props.title\r\n\t};\r\n\r\n\tactivateEditMode = () => this.setState({ addMode: true });\r\n\r\n\tdeactivateEditMode = () => {\r\n\t\tthis.setState({ addMode: false });\r\n\t\tlet newTitleList = this.state.title;\r\n\t\tthis.props.changeTitleList(newTitleList); //передаю наверх новый тайтл\r\n\t};\r\n\r\n\tonTitleChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tlet title = event.currentTarget.value;\r\n\t\tthis.setState({ title });\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{this.state.addMode ? (\r\n\t\t\t\t\t<TextField\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tvalue={this.state.title}\r\n\t\t\t\t\t\tonBlur={this.deactivateEditMode}\r\n\t\t\t\t\t\tonChange={this.onTitleChanged}\r\n\t\t\t\t\t\tlabel=\"Change title\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\tonClick={this.activateEditMode}\r\n\t\t\t\t\t\t\tvariant=\"h5\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{this.state.title}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TodoListTitle;\r\n","import {\r\n    IDeletedToDoList,\r\n    IResCreateToDoList, IResGetTasks,\r\n    ITask,\r\n    ITodoList,\r\n    IUpdateTitleToDoList\r\n} from \"../Redux/interfaces\";\r\nimport axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"29f9fa1b-6eaa-4e21-8fb8-288f6a026f6c\"}\r\n});\r\n\r\nexport const api = {\r\n    getToDoLists(): Promise<Array<ITodoList>> {\r\n        return instance.get<Array<ITodoList>>('')\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n\r\n    createToDoList(text: string) : Promise<ITodoList> {\r\n        return instance.post<IResCreateToDoList>(\"\", {title: text}).then(response => {\r\n            let todoList = response.data.data.item;\r\n            return todoList\r\n        });\r\n        ;\r\n    },\r\n\r\n    deleteToDoList(todoListId: string) : Promise<number> {\r\n        return instance.delete<IDeletedToDoList>(`/${todoListId}`).then(response => {\r\n            return response.data.resultCode;\r\n        });\r\n    },\r\n\r\n    updateTitleToDoList(newTitle: string, todoListId: string) : Promise<IUpdateTitleToDoList> {\r\n        return instance.put<IUpdateTitleToDoList>(`/${todoListId}`, {title: newTitle}).then(response => {\r\n            return response.data\r\n        });;\r\n    },\r\n\r\n    getTasks(todoListId: string) : Promise<ITask[]> {\r\n        return instance.get<IResGetTasks>(`/${todoListId}/tasks`).then(response => {\r\n\r\n            return response.data.items;\r\n        });\r\n    },\r\n\r\n    createTask(newTitleTask: string, todoListId: string) : Promise<ITask>{\r\n        return instance.post(`/${todoListId}/tasks`, {title: newTitleTask}).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n\r\n                return response.data.data.item\r\n            }\r\n        });\r\n    },\r\n\r\n    deleteTask(taskId: string, todoListId: string) : Promise<number> {\r\n        return instance.delete(`/${todoListId}/tasks/${taskId}`).then(response => {\r\n            return response.data.resultCode\r\n        });\r\n    },\r\n\r\n    updateTask(updateTask: ITask, taskId: string, todoListId: string) : Promise<ITask> {\r\n        return instance.put(`/${todoListId}/tasks/${taskId}`, updateTask).then(response => {\r\n            return response.data.data.item\r\n        });\r\n    }\r\n};\r\n\r\n\r\n","export const ADD_TODOLIST = \"TodoList/Reducer/ADD-TODOLIST\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const CHANGE_TASK = \"TodoList/Reducer/CHANGE-TASK\";\r\nexport const FILTER_TASK = \"TodoList/Reducer/FILTER-TASK\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const SET_TODOLIST = \"TodoList/Reducer/SET-TODOLIST\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET-TASKS\";\r\nexport const ERROR = \"TodoList/Reducer/ERROR\";\r\nexport const CHANGE_TITLE_LIST = \"TodoList/Reducer/CHANGE_TITLE_LIST\";\r\nexport const FORM_LOGIN = \"TodoList/Reducer/FORM_LOGIN\";\r\n\r\n//interface для каждого actionCreator\r\n\r\nexport interface IAddTodolist {\r\n    type : typeof ADD_TODOLIST; //type будет строкой \"TodoList/Reducer/ADD-TODOLIST\"\r\n    newToDolist : any\r\n};\r\n\r\nexport interface IAddTask {\r\n    type : typeof ADD_TASK;\r\n    newTask : any;\r\n    todoListId : string;\r\n};\r\n\r\nexport interface IChangeTask {\r\n    type : typeof CHANGE_TASK;\r\n    updatedTask : any\r\n};\r\n\r\nexport interface IFilterTasks {\r\n    type : typeof FILTER_TASK;\r\n    newFilterValue : string;\r\n    todoListId : string;\r\n};\r\n\r\nexport interface IDeleteTask {\r\n    type : typeof DELETE_TASK;\r\n    taskId : string;\r\n    todoListId : string;\r\n};\r\n\r\nexport interface IDeleteToDoList {\r\n    type : typeof DELETE_TODOLIST;\r\n    todoListId : string;\r\n};\r\n\r\nexport interface ISetToDoList {\r\n    type : typeof SET_TODOLIST;\r\n    todoLists : any[];\r\n};\r\n\r\nexport interface ISetTasks {\r\n    type : typeof SET_TASKS;\r\n    tasks : any[];\r\n    todoListId : string;\r\n};\r\n\r\nexport interface IChangeTitleList {\r\n    type : typeof CHANGE_TITLE_LIST;\r\n    newTitle : string;\r\n    todoListId : string\r\n};\r\n\r\nexport interface IError {\r\n    type: typeof ERROR\r\n};\r\n\r\nexport interface ILogin{\r\n    type: typeof FORM_LOGIN\r\n};\r\n\r\n// Собираю все interface для reducer\r\nexport type allActionTypes =\r\n    | IAddTodolist\r\n    | IAddTask\r\n    | IChangeTask\r\n    | IFilterTasks\r\n    | IDeleteTask\r\n    | IDeleteToDoList\r\n    | ISetToDoList\r\n    | ISetTasks\r\n    | IChangeTitleList\r\n    | IError\r\n    | ILogin\r\n\r\n\r\n","import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"29f9fa1b-6eaa-4e21-8fb8-288f6a026f6c\"}\r\n});\r\n\r\nexport const apiAuthorization = {\r\n    authorization(email: string, password: string, rememberMe: boolean, captcha: boolean = false) {\r\n        return instance.post('auth/login', {email :'petrushin.vyac@yandex.ru', password : '488661632', rememberMe, captcha})\r\n            .then(response => {\r\n            return response.data\r\n            })\r\n    }\r\n};\r\n\r\n\r\n","import {api} from \"../Dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    allActionTypes,\r\n    ADD_TASK,\r\n    ADD_TODOLIST,\r\n    CHANGE_TASK,\r\n    CHANGE_TITLE_LIST,\r\n    DELETE_TASK,\r\n    DELETE_TODOLIST,\r\n    FILTER_TASK,\r\n    SET_TASKS,\r\n    SET_TODOLIST,\r\n    IAddTodolist,\r\n    IAddTask,\r\n    IChangeTask,\r\n    IFilterTasks,\r\n    IDeleteTask,\r\n    IDeleteToDoList,\r\n    ISetToDoList,\r\n    ISetTasks,\r\n    IChangeTitleList,\r\n    FORM_LOGIN, ILogin,\r\n} from \"../types/actions\";\r\nimport {\r\n    ITask,\r\n    ITodoList,\r\n    IUpdateTitleToDoList\r\n} from \"./interfaces\";\r\nimport {apiAuthorization} from \"../Dal/apiAuthorization\";\r\n\r\ninterface IState {\r\n    todoLists: Array<ITodoList>;\r\n    errorMessage: boolean;\r\n    authorization: boolean;\r\n}\r\n\r\nconst initialState: IState = {\r\n    todoLists: [],\r\n    errorMessage: false,\r\n    authorization : false\r\n};\r\n\r\nexport const toDoListReducer = (\r\n    state = initialState,\r\n    action: allActionTypes\r\n) => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todoLists: [\r\n                    ...state.todoLists,\r\n                    {...action.newToDolist, tasks: [], filterValue: \"All\"}\r\n                ]\r\n            };\r\n\r\n        case CHANGE_TITLE_LIST:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.todoListId) {\r\n                        ;\r\n                        return {...todoList, title: action.newTitle};\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case ADD_TASK: //Добавление новых тасок в лист\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.todoListId) {\r\n                        return {...todoList, tasks: [...todoList.tasks, action.newTask]};\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_TASK:\r\n            ;\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.updatedTask.todoListId) {\r\n                        return {\r\n                            ...todoList, //\t1 ищем совпадение листа\r\n                            tasks: todoList.tasks.map((task: any) => {\r\n                                if (task.id === action.updatedTask.id) {\r\n                                    return {...task, ...action.updatedTask};\r\n                                } else {\r\n                                    return task;\r\n                                }\r\n                            })\r\n                        };\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case FILTER_TASK:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.todoListId) {\r\n                        return {...todoList, filterValue: action.newFilterValue};\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.todoListId) {\r\n                        return {\r\n                            ...todoList, //\t1 ищем совпадение листа\r\n                            tasks: todoList.tasks.filter((task: any) => {\r\n                                return task.id !== action.taskId;\r\n                            })\r\n                        };\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.filter(list => list.id !== action.todoListId)\r\n            };\r\n        case SET_TODOLIST:\r\n            let todoLists = action.todoLists.map((todoList: ITodoList) => {\r\n                return {\r\n                    ...todoList,\r\n                    tasks: [],\r\n                    filterValue: \"All\"\r\n                };\r\n            });\r\n            return {\r\n                ...state,\r\n                todoLists: todoLists\r\n            };\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.todoListId) {\r\n                        return {\r\n                            ...todoList,\r\n                            tasks: [...todoList.tasks, ...action.tasks]\r\n                        };\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case FORM_LOGIN :\r\n            return {\r\n                ...state,\r\n                authorization : true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//ActionCreater\r\nexport const addTodolist = (newToDolist: ITodoList): IAddTodolist => ({\r\n    type: ADD_TODOLIST,\r\n    newToDolist\r\n});\r\nexport const addTask = (newTask: ITask, todoListId: string): IAddTask => ({\r\n    type: ADD_TASK,\r\n    newTask,\r\n    todoListId\r\n});\r\nexport const changeTask = (updatedTask: ITask): IChangeTask => ({\r\n    type: CHANGE_TASK,\r\n    updatedTask\r\n});\r\nexport const filterTasks = (\r\n    newFilterValue: string,\r\n    todoListId: string\r\n): IFilterTasks => ({type: FILTER_TASK, newFilterValue, todoListId});\r\nexport const deleteTask = (\r\n    taskId: string,\r\n    todoListId: string\r\n): IDeleteTask => ({type: DELETE_TASK, taskId, todoListId});\r\nexport const deleteToDoList = (todoListId: string): IDeleteToDoList => ({\r\n    type: DELETE_TODOLIST,\r\n    todoListId\r\n});\r\nexport const setToDoList = (todoLists: Array<ITodoList>): ISetToDoList => ({\r\n    type: SET_TODOLIST,\r\n    todoLists\r\n});\r\nexport const setTasks = (\r\n    tasks: Array<ITask>,\r\n    todoListId: string\r\n): ISetTasks => ({type: SET_TASKS, tasks, todoListId});\r\nexport const changeTitleList = (\r\n    newTitle: string,\r\n    todoListId: string\r\n): IChangeTitleList => ({type: CHANGE_TITLE_LIST, newTitle, todoListId});\r\n\r\nexport const authorizationAC = () : ILogin => ({type : FORM_LOGIN});\r\n\r\n\r\n//thunk\r\nexport const getToDolistThunkCreator = () => (dispatch: Dispatch): void => {\r\n    api.getToDoLists()\r\n        .then((response: Array<ITodoList>) => {\r\n            dispatch(setToDoList(response));\r\n        });\r\n};\r\n\r\nexport const createToDoListThunkCreator = (title: string) => (dispatch: Dispatch): void => {\r\n    api.createToDoList(title)\r\n        .then((todoList: ITodoList) => {\r\n            dispatch(addTodolist(todoList));\r\n        });\r\n};\r\n\r\nexport const deleteToDoListThunkCreator = (todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.deleteToDoList(todoListId)\r\n        .then(resultCode => {\r\n            if (resultCode === 0) {\r\n                dispatch(deleteToDoList(todoListId));\r\n            }\r\n        });\r\n};\r\n\r\nexport const updateTitleToDoListThunkCreator = (title: string, todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.updateTitleToDoList(title, todoListId)\r\n        .then((response: IUpdateTitleToDoList) => {\r\n            dispatch(changeTitleList(title, todoListId));\r\n        });\r\n};\r\n\r\nexport const getTasksThunkCreator = (todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.getTasks(todoListId).then(tasks => {\r\n        dispatch(setTasks(tasks, todoListId));\r\n    });\r\n};\r\n\r\nexport const createTaskThunkCreator = (newTitleTask: string, todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.createTask(newTitleTask, todoListId)\r\n        .then(response => {\r\n            dispatch(addTask(response, todoListId));\r\n        });\r\n};\r\n\r\nexport const deleteTaskThunkCreator = (taskId: string, todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.deleteTask(taskId, todoListId)\r\n        .then((resultCode) => {\r\n            if (resultCode === 0) {\r\n                dispatch(deleteTask(taskId, todoListId));\r\n            }\r\n        });\r\n};\r\n\r\nexport const updateTaskThunkCreator = (updateTask: ITask, taskId: string, todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.updateTask(updateTask, taskId, todoListId)\r\n        .then((task) => {\r\n            dispatch(changeTask(task));\r\n        });\r\n};\r\n\r\nexport const authorizationUser = (email : string, password : string, rememberMe : boolean) => (dispatch: Dispatch): void => {\r\n    apiAuthorization.authorization(email, password, rememberMe).then(response => {\r\n\r\n        if (response.resultCode === 0) {\r\n            dispatch(authorizationAC());\r\n        }\r\n    })\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./../App.css\";\r\nimport \"./Style/TodoList.css\";\r\nimport TodoListFooter from \"./TodoListFooter\";\r\nimport TodoListTasks from \"./TodoListTasks\";\r\nimport TodoListTitle from \"./TodoListTitle\";\r\nimport { connect } from \"react-redux\";\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport {\r\n\tfilterTasks,\r\n\tcreateTaskThunkCreator, deleteTaskThunkCreator,\r\n\tdeleteToDoListThunkCreator,\r\n\tgetTasksThunkCreator, updateTaskThunkCreator,\r\n\tupdateTitleToDoListThunkCreator\r\n} from \"../Redux/reducer\";\r\nimport { RootState } from \"../Redux/store\";\r\nimport { IObjChangeTask, ITask } from \"../Redux/interfaces\";\r\nimport { IconButton, Card, CardContent } from \"@material-ui/core\";\r\nimport { Delete } from \"@material-ui/icons\";\r\n\r\ninterface IProps {\r\n\tid: string;\r\n\ttitle: string;\r\n\tkey: string;\r\n\ttasks: Array<ITask>;\r\n\tfilterValue: string;\r\n};\r\n\r\ninterface IMapStateToProps {\r\n\terrorMessage: boolean\r\n}\r\n\r\ninterface IDispatchStateToProps {\r\n\tfilterTasks: (newFilterValue: string, todoListId: string) => void;\r\n\tdeleteToDoListThunkCreator: (todoListId: string) => void;\r\n\tupdateTitleToDoListThunkCreator: (newTitle: string, todoListId: string) => void;\r\n\tgetTasksThunkCreator: (todoListId: string) => void;\r\n\tcreateTaskThunkCreator: (newTitleTask: string, todoListId: string) => void;\r\n\tdeleteTaskThunkCreator: (taskId: string, todoListId: string) => void;\r\n\tupdateTaskThunkCreator: (updatedTask: ITask, taskId: string, todoListId: string) => void;\r\n}\r\n\r\nclass ToDoList extends React.Component<IProps & IMapStateToProps & IDispatchStateToProps> {\r\n\tcomponentDidMount() {\r\n\t\tlet todoListId = this.props.id;\r\n\t\tthis.props.getTasksThunkCreator(todoListId);\r\n\t}\r\n\r\n\taddTask = (newTitleTask: string) => {\r\n\t\tlet todoListId = this.props.id;\r\n\t\tthis.props.createTaskThunkCreator(newTitleTask, todoListId);\r\n\t};\r\n\r\n\tchangeTask = (taskId: string, obj: IObjChangeTask) => {\r\n\t\tlet todoListId = this.props.id;\r\n\t\tlet changeUserTask = this.props.tasks.find((task: ITask) => task.id === taskId);\r\n\t\tif (changeUserTask) {\r\n\t\t\tlet updateTask = {\r\n\t\t\t\t...changeUserTask,\r\n\t\t\t\t...obj\r\n\t\t\t};\r\n\t\t\tthis.props.updateTaskThunkCreator(updateTask, taskId, todoListId);\r\n\t\t}\r\n\t};\r\n\r\n\tchangeFilter = (newFilterValue: string) => {\r\n\t\tlet todoListId = this.props.id;\r\n\t\tthis.props.filterTasks(newFilterValue, todoListId);\r\n\t};\r\n\r\n\tdeleteTask = (taskId: string) => {\r\n\t\tlet todoListId = this.props.id;\r\n\t\tthis.props.deleteTaskThunkCreator(taskId, todoListId);\r\n\t};\r\n\r\n\tdeleteToDoList = () => {\r\n\t\tlet todoListId = this.props.id;\r\n\t\tthis.props.deleteToDoListThunkCreator(todoListId);\r\n\t};\r\n\r\n\tchangeTitleList = (newTitleList: string) => {\r\n\t\tlet todoListId = this.props.id;\r\n\t\tthis.props.updateTitleToDoListThunkCreator(newTitleList, todoListId);\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst getFilterTasks = (tasks: Array<ITask>, filter: string) => {\r\n\t\t\treturn tasks.filter((task: ITask) => {\r\n\t\t\t\tswitch (filter) {\r\n\t\t\t\t\tcase \"All\":\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\tcase \"Completed\":\r\n\t\t\t\t\t\treturn task.status === 2;\r\n\t\t\t\t\tcase \"Active\":\r\n\t\t\t\t\t\treturn task.status === 0;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tlet errorMessage = this.props.errorMessage && \"Error\";\r\n\r\n\t\treturn (\r\n\t\t\t<Card className={\"todo-list\"}>\r\n\t\t\t\t<CardContent>\r\n\t\t\t\t\t<div className={\"todo-list-info\"}>\r\n\t\t\t\t\t\t<TodoListTitle\r\n\t\t\t\t\t\t\ttitle={this.props.title}\r\n\t\t\t\t\t\t\tchangeTitleList={this.changeTitleList}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<IconButton onClick={this.deleteToDoList}>\r\n\t\t\t\t\t\t\t<Delete />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<AddNewItemForm\r\n\t\t\t\t\t\taddItem={this.addTask}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<TodoListTasks\r\n\t\t\t\t\t\ttasks={getFilterTasks(this.props.tasks, this.props.filterValue)}\r\n\t\t\t\t\t\tchangeTask={this.changeTask}\r\n\t\t\t\t\t\tdeleteTask={this.deleteTask}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<TodoListFooter\r\n\t\t\t\t\t\tchangeFilter={this.changeFilter}\r\n\t\t\t\t\t\tfilterValue={this.props.filterValue}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{errorMessage}\r\n\t\t\t\t</CardContent>\r\n\t\t\t</Card>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootState): IMapStateToProps => {\r\n\treturn {\r\n\t\terrorMessage: state.todoListsPage.errorMessage\r\n\t};\r\n};\r\n\r\nconst TodoListContainer = connect(\r\n\tmapStateToProps,\r\n\t{\r\n\t\tfilterTasks, deleteToDoListThunkCreator, updateTitleToDoListThunkCreator,\r\n\t\tgetTasksThunkCreator, createTaskThunkCreator, deleteTaskThunkCreator, updateTaskThunkCreator\r\n\t}\r\n)(ToDoList);\r\n\r\nexport default TodoListContainer;\r\n","import React, { Component } from 'react';\r\nimport \"./Style/LoginForm.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { authorizationUser } from \"../Redux/reducer\";\r\nimport { Grid, Typography, TextField, Button } from '@material-ui/core';\r\n\r\ninterface IDispatchToProps {\r\n\tauthorizationUser: (email: string, password: string, rememberMe: boolean) => void;\r\n}\r\n\r\ninterface IState {\r\n\temail: string;\r\n\tpassword: string;\r\n\trememberMe: boolean\r\n}\r\n\r\nclass LoginForm extends Component<IDispatchToProps> {\r\n\tstate: IState = {\r\n\t\temail: 'petrushin.vyac@yandex.ru',\r\n\t\tpassword: '488661632',\r\n\t\trememberMe: false\r\n\t};\r\n\r\n\tonHandleSubmit = (e: any) => {\r\n\t\te.preventDefault();\r\n\t\tconst { email, password, rememberMe } = this.state;\r\n\t\tthis.props.authorizationUser(email, password, rememberMe)\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { email, password } = this.state;\r\n\t\tconst disabledBtn = email !== 'petrushin.vyac@yandex.ru' && password !== '488661632';\r\n\t\treturn (\r\n\t\t\t<Grid\r\n\t\t\t\tcontainer\r\n\t\t\t\tclassName=\"authorization\"\r\n\t\t\t>\r\n\t\t\t\t<Grid\r\n\t\t\t\t\tclassName={\"register-bg\"}\r\n\t\t\t\t\titem sm={6}\r\n\t\t\t\t\txs={12}\r\n\t\t\t\t>\r\n\t\t\t\t\t<div className={'login-photo'} />\r\n\t\t\t\t\t<Typography variant=\"h5\">Регистрация</Typography>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item sm={6} xs={12}>\r\n\t\t\t\t\t<form className={'login-form'} onSubmit={this.onHandleSubmit}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tid=\"outlined-uncontrolled\"\r\n\t\t\t\t\t\t\tlabel=\"Email\"\r\n\t\t\t\t\t\t\tdefaultValue={email}\r\n\t\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\t\tclassName={'login-field'}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tid=\"outlined-uncontrolled\"\r\n\t\t\t\t\t\t\tlabel=\"Password\"\r\n\t\t\t\t\t\t\tdefaultValue={password}\r\n\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\tclassName={'login-field'}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\ttype=\"submit\" disabled={disabledBtn}\r\n\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tОтправить\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\r\n\t\t);\r\n\t};\r\n}\r\n\r\nexport default connect(null, { authorizationUser })(LoginForm);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport AddNewItemForm from \"./Component/AddNewItemForm\";\r\nimport TodoList from \"./Component/TodoList\";\r\nimport { connect } from \"react-redux\";\r\nimport { createToDoListThunkCreator, getToDolistThunkCreator } from \"./Redux/reducer\";\r\nimport { RootState } from \"./Redux/store\";\r\nimport { ITodoList } from \"./Redux/interfaces\";\r\nimport LoginForm from \"./Component/LoginForm\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Button, IconButton, Toolbar, Typography } from \"@material-ui/core\";\r\n\r\ninterface IStateToProps {\r\n\ttodoLists: Array<ITodoList>;\r\n\tauthorization: boolean;\r\n}\r\n\r\ninterface IDispatchToProps {\r\n\tgetToDolistThunkCreator: () => void;\r\n\tcreateToDoListThunkCreator: (title: string) => void;\r\n}\r\n\r\nclass App extends React.Component<IStateToProps & IDispatchToProps> {\r\n\tcomponentDidUpdate(prevProps: any, prevState: IStateToProps) {\r\n\t\tif (prevProps.authorization !== this.props.authorization) {\r\n\t\t\tthis.props.getToDolistThunkCreator()\r\n\t\t}\r\n\t}\r\n\r\n\taddToDoList = (title: string) => {\r\n\t\tthis.props.createToDoListThunkCreator(title)\r\n\t};\r\n\r\n\trender() {\r\n\t\tlet todoLists = this.props.todoLists.map((list: ITodoList) => (\r\n\t\t\t<TodoList\r\n\t\t\t\tid={list.id}\r\n\t\t\t\ttitle={list.title}\r\n\t\t\t\tkey={list.id}\r\n\t\t\t\ttasks={list.tasks}\r\n\t\t\t\tfilterValue={list.filterValue}\r\n\t\t\t/>\r\n\t\t));\r\n\r\n\t\treturn (\r\n\t\t\t<div className={'wrapper'}>\r\n\t\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t<IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n\t\t\t\t\t\t\t<MenuIcon />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t\t\t\tTodoList\r\n              </Typography>\r\n\t\t\t\t\t\t<Button color=\"inherit\">Login</Button>\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</AppBar>\r\n\r\n\t\t\t\t<Container maxWidth=\"sm\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t!this.props.authorization ? <LoginForm /> : <>\r\n\t\t\t\t\t\t\t<AddNewItemForm addItem={this.addToDoList} />\r\n\t\t\t\t\t\t\t<div className=\"App\">{todoLists}</div>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Container>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n\treturn {\r\n\t\ttodoLists: state.todoListsPage.todoLists,\r\n\t\tauthorization: state.todoListsPage.authorization\r\n\t};\r\n};\r\n\r\n\r\n\r\nconst ConnectedApp = connect(mapStateToProps, { getToDolistThunkCreator, createToDoListThunkCreator })(App);\r\n\r\nexport default ConnectedApp;\r\n\r\n","import {createStore, combineReducers, applyMiddleware} from \"redux\";\r\nimport { toDoListReducer } from \"./reducer\";\r\nimport thunk, {ThunkMiddleware} from \"redux-thunk\";\r\nimport {allActionTypes} from \"../types/actions\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todoListsPage: toDoListReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk as ThunkMiddleware<RootState, allActionTypes>));\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport ConnectedApp from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./Redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ConnectedApp />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}