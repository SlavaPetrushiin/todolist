{"version":3,"sources":["serviceWorker.js","Component/AddNewItemForm.tsx","Component/TodoListFooter.tsx","Component/TodoListTask.tsx","Component/TodoListTasks.tsx","Component/TodoListTitle.tsx","Dal/api.ts","types/actions.ts","Redux/reducer.ts","Component/TodoList.tsx","App.tsx","Redux/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddNewItemForm","state","error","title","onAddItemClick","text","_this","setState","props","addItem","handleClick","event","word","target","value","trimLeft","handleEnter","key","render","classForInput","react_default","a","createElement","className","type","placeholder","onChange","onKeyPress","onClick","React","Component","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTask","addMode","task","activeEditMode","deactivateEditMode","changeTask","id","onIsDoneChanged","status","currentTarget","checked","onTitleChanged","handleDeleteTask","deleteTask","handleChangeSelect","priority","classForTask","autoFocus","onBlur","selected","style","color","TodoListTasks","tasksElements","tasks","map","Component_TodoListTask","length","TodoListTitle","handleDeleteList","deleteToDoList","activateEditMode","newTitleList","changeTitleList","this","instance","require","create","baseURL","withCredentials","headers","API-KEY","api","get","then","response","data","post","todoListId","delete","concat","newTitle","put","newTitleTask","taskId","updateTask","ADD_TASK","initialState","todoLists","errorMessage","ToDoList","addTask","createTaskThunkCreator","obj","changeUserTask","find","TodoList_objectSpread","updateTaskThunkCreator","newFilterValue","filterTasks","deleteTaskThunkCreator","deleteToDoListThunkCreator","updateTitleToDoListThunkCreator","getTasksThunkCreator","filter","Component_TodoListTitle","Component_AddNewItemForm","Component_TodoListTasks","Component_TodoListFooter","TodoListContainer","connect","todoListsPage","dispatch","resultCode","items","setTasks","newTask","_objectSpread","item","updatedTask","App","addToDoList","createToDoListThunkCreator","getToDolistThunkCreator","list","TodoList","ConnectedApp","todoList","newToDolist","rootReducer","combineReducers","arguments","undefined","action","Object","toConsumableArray","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6039e48.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./Style/AddNewItemForm.css\";\r\n\r\ninterface IProps {\r\n    addItem: Function;\r\n}\r\n\r\ninterface IState {\r\n    error: boolean;\r\n    title: string;\r\n}\r\n\r\nclass AddNewItemForm extends React.Component<IProps, IState> {\r\n    state = {\r\n        error: false,\r\n        title: \"\"\r\n    };\r\n\r\n    onAddItemClick = () => {\r\n        let text = this.state.title;\r\n\r\n        if (text === \"\") {\r\n            this.setState({error: true});\r\n        } else {\r\n            this.setState({error: false, title: \"\"});\r\n            this.props.addItem(text);\r\n        }\r\n    };\r\n\r\n    handleClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        let word = event.target.value.trimLeft();\r\n        this.setState({error: false, title: word});\r\n    };\r\n\r\n    handleEnter = (event: React.KeyboardEvent) => {\r\n        if (event.key === \"Enter\") {\r\n            this.onAddItemClick();\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n        let classForInput = this.state.error ? \"error\" : \"\";\r\n        return (\r\n            <div className=\"todoList-newTaskForm\">\r\n                <input\r\n                    value={this.state.title}\r\n                    type=\"text\"\r\n                    placeholder=\"New task name\"\r\n                    className={(classForInput + ' ' + 'inputList')}\r\n                    onChange={this.handleClick}\r\n                    onKeyPress={this.handleEnter}\r\n                />\r\n                <button className=\"button\" onClick={this.onAddItemClick}><span>Add</span></button>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default AddNewItemForm;\r\n","import React from \"react\";\r\nimport \"./Style/TodoListFooter.css\";\r\n\r\ninterface IProps{\r\n  changeFilter : Function;\r\n  filterValue : string;\r\n}\r\n\r\ninterface IState{\r\n  isHidden: boolean;\r\n}\r\n\r\nclass TodoListFooter extends React.Component<IProps, IState> {\r\n  state = {\r\n    isHidden: false\r\n  };\r\n\r\n  onAllFilterClick = () => {\r\n    this.props.changeFilter(\"All\");\r\n  };\r\n\r\n  onCompletedFilterClick = () => {\r\n    this.props.changeFilter(\"Completed\");\r\n  };\r\n\r\n  onActiveFilterClick = () => {\r\n    this.props.changeFilter(\"Active\");\r\n  };\r\n\r\n  onShowFiltersClick = () => {\r\n    this.setState({ isHidden: false });\r\n  };\r\n\r\n  onHideFiltersClick = () => {\r\n    this.setState({ isHidden: true });\r\n  };\r\n\r\n  render = () => {\r\n    let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\r\n    let classForCompleted =\r\n      this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\r\n    let classForActive =\r\n      this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\r\n    return (\r\n      <div className=\"todoList-footer\">\r\n        {!this.state.isHidden && (\r\n          <div>\r\n            <button onClick={this.onAllFilterClick} className={classForAll + ' ' + 'buttonSort' + ' ' + 'buttonSort1'}>\r\n              All\r\n            </button>\r\n            <button\r\n              onClick={this.onCompletedFilterClick}\r\n              className={classForCompleted + ' ' + 'buttonSort' + ' ' + 'buttonSort1'}\r\n            >\r\n              Completed\r\n            </button>\r\n            <button\r\n              onClick={this.onActiveFilterClick}\r\n              className={classForActive + ' ' + 'buttonSort' + ' ' + 'buttonSort1'}\r\n            >\r\n              Active\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {!this.state.isHidden && (\r\n          <span onClick={this.onHideFiltersClick}>hide</span>\r\n        )}\r\n        {this.state.isHidden && (\r\n          <span onClick={this.onShowFiltersClick}>show</span>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default TodoListFooter;\r\n","import React from \"react\";\r\nimport {ITask} from \"../Redux/interfaces\";\r\n\r\ninterface IProps{\r\n  key : string;\r\n  task : ITask;\r\n  changeTask : Function;\r\n  deleteTask : Function;\r\n};\r\n\r\ninterface IState {\r\n  addMode : boolean;\r\n  title : string;\r\n}\r\n\r\n\r\nclass TodoListTask extends React.Component<IProps, IState> {\r\n  state = {\r\n    addMode: false,\r\n    title: this.props.task.title\r\n  };\r\n\r\n  activeEditMode = () => {\r\n    //активация поля ввода на таске\r\n    this.setState({ addMode: true });\r\n  };\r\n\r\n  deactivateEditMode = () => {\r\n    //деактивация поля ввода на таске\r\n    this.setState({ addMode: false });\r\n    this.props.changeTask(this.props.task.id, { title: this.state.title });\r\n  };\r\n\r\n  //изменение чекбокса\r\n  onIsDoneChanged = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n    let status = event.currentTarget.checked ? 2 : 0;\r\n    this.props.changeTask(\r\n      this.props.task.id, //id таски\r\n      { status }\r\n    );\r\n  };\r\n\r\n  //изменение глобальной таски по изменению инпута\r\n  onTitleChanged = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n    let title = event.currentTarget.value;\r\n    this.setState({ title });\r\n  };\r\n\r\n  handleDeleteTask = () => {\r\n    this.props.deleteTask(this.props.task.id);\r\n  };\r\n\r\n  handleChangeSelect = (event : React.ChangeEvent<HTMLSelectElement>) =>{\r\n    let priority;\r\n    switch (event.target.value) {\r\n      case \"Low\":\r\n        priority = 0;\r\n        break;\r\n      case \"Middle\":\r\n        priority = 1;\r\n        break;\r\n      case \"Hi\":\r\n        priority = 2;\r\n        break;\r\n      case \"Urgently\":\r\n        priority = 3;\r\n        break;\r\n      case \"Later\":\r\n        priority = 4;\r\n        break;\r\n    }\r\n    this.props.changeTask(\r\n        this.props.task.id, //id таски\r\n        { priority }\r\n    );\r\n  }\r\n\r\n  render = () => {\r\n\r\n    let status = this.props.task.status === 2 ? true : false;\r\n    let classForTask = status ? \"done\" : \"\";\r\n    let priority;\r\n    switch (this.props.task.priority) {\r\n      case 0:\r\n        priority = \"Low\";\r\n        break;\r\n      case 1:\r\n        priority = \"Middle\";\r\n        break;\r\n      case 2:\r\n        priority = \"Hi\";\r\n        break;\r\n      case 3:\r\n        priority = \"Urgently\";\r\n        break;\r\n      case 4:\r\n        priority = \"Later\";\r\n        break;\r\n    }\r\n\r\n    return (\r\n      <div className=\"todoList-task\">\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={status}\r\n          onChange={this.onIsDoneChanged}\r\n          className={classForTask}\r\n        />\r\n        {this.state.addMode ? (\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.title}\r\n            autoFocus={true}\r\n            onBlur={this.deactivateEditMode}\r\n            onChange={this.onTitleChanged}\r\n          />\r\n        ) : (\r\n            <div>\r\n              <span className={classForTask} onClick={this.activeEditMode}>\r\n                {this.state.title},{priority}\r\n              </span>\r\n              <select value={priority} onChange={this.handleChangeSelect} >\r\n                <option value=\"Low\">Low</option>\r\n                <option value=\"Middle\">Middle</option>\r\n                <option selected value=\"Hi\">Hi</option>\r\n                <option value=\"Urgently\">Urgently</option>\r\n                <option value=\"Later\">Later</option>\r\n              </select>\r\n              <span style={{ color: \"red\" }} onClick={this.handleDeleteTask}>\r\n                &#10008;\r\n              </span>\r\n            </div>\r\n        )}\r\n\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default TodoListTask;\r\n","import React from \"react\";\r\nimport TodoListTask from \"./TodoListTask\";\r\nimport {ITask} from \"../Redux/interfaces\";\r\n\r\ninterface IProps{\r\n  tasks: Array<ITask>;\r\n  changeTask : Function;\r\n  deleteTask : Function;\r\n};\r\n\r\nclass TodoListTasks extends React.Component<IProps> {\r\n  render = () => {\r\n    const tasksElements = this.props.tasks.map((task : ITask) => {\r\n      return (\r\n        <TodoListTask\r\n          key={task.id}\r\n          task={task}\r\n          changeTask={this.props.changeTask}\r\n          deleteTask={this.props.deleteTask}\r\n        />\r\n      );\r\n    });\r\n    return tasksElements.length !== 0 ? (\r\n      <div className=\"todoList-tasks\">{tasksElements}</div>\r\n    ) : null;\r\n  };\r\n}\r\n\r\nexport default TodoListTasks;\r\n","import React from \"react\";\r\n\r\ninterface IProps{\r\n  title : string;\r\n  deleteToDoList : Function;\r\n  changeTitleList : Function;\r\n}\r\n\r\ninterface IState{\r\n  addMode: boolean;\r\n  title: string;\r\n}\r\n\r\nclass TodoListTitle extends React.Component<IProps, IState> {\r\n  state = {\r\n    addMode: false,\r\n    title: this.props.title\r\n  };\r\n\r\n  handleDeleteList = () => {\r\n    this.props.deleteToDoList();\r\n  };\r\n\r\n  activateEditMode = () => this.setState({ addMode: true });\r\n\r\n  deactivateEditMode = () => {\r\n    this.setState({ addMode: false });\r\n    let newTitleList = this.state.title;\r\n    this.props.changeTitleList(newTitleList); //передаю наверх новый тайтл\r\n  };\r\n\r\n  onTitleChanged = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n    let title = event.currentTarget.value;\r\n    this.setState({ title });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"headerTitle\">\r\n        {this.state.addMode ? (\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.title}\r\n            onBlur={this.deactivateEditMode}\r\n            onChange={this.onTitleChanged}\r\n          />\r\n        ) : (\r\n          <h3\r\n            className=\"todoList-header__title\"\r\n            onClick={this.activateEditMode}\r\n          >\r\n            {this.state.title}\r\n          </h3>\r\n        )}\r\n\r\n        <span style={{ color: \"red\" }} onClick={this.handleDeleteList}>\r\n          &#10008;\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoListTitle;\r\n","import {IResGetToDoLists, ITask, ITodoList} from \"../Redux/interfaces\";\r\nconst axios = require('axios');\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n  withCredentials: true,\r\n  headers: { \"API-KEY\": \"c42da93b-73d1-47c9-9b91-cb5950b4c7d5\" }\r\n});\r\n\r\nexport const api = {\r\n  getToDoLists() : Promise<Array<ITodoList>>{\r\n    return instance.get().then((response: IResGetToDoLists) => {\r\n      return response.data;\r\n    });\r\n  },\r\n\r\n  createToDoList(text : string) {\r\n    return instance.post(\"\", { title: text });\r\n  },\r\n\r\n  deleteToDoList(todoListId : string) {\r\n    return instance.delete(`/${todoListId}`);\r\n  },\r\n\r\n  updateTitleToDoList(newTitle : string, todoListId : string) {\r\n    return instance.put(`/${todoListId}`, { title: newTitle });\r\n  },\r\n\r\n  getTasks(todoListId : string) {\r\n    return instance.get(`/${todoListId}/tasks`);\r\n  },\r\n\r\n  createTask(newTitleTask : string, todoListId : string) {\r\n    return instance.post(`/${todoListId}/tasks`, { title: newTitleTask });\r\n  },\r\n\r\n  deleteTask(taskId : string, todoListId : string) {\r\n    return instance.delete(`/${todoListId}/tasks/${taskId}`);\r\n  },\r\n\r\n  updateTask(updateTask : ITask, taskId : string, todoListId : string) {\r\n    return instance.put(`/${todoListId}/tasks/${taskId}`, updateTask);\r\n  }\r\n};\r\n","export const ADD_TODOLIST = \"TodoList/Reducer/ADD-TODOLIST\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const CHANGE_TASK = \"TodoList/Reducer/CHANGE-TASK\";\r\nexport const FILTER_TASK = \"TodoList/Reducer/FILTER-TASK\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const SET_TODOLIST = \"TodoList/Reducer/SET-TODOLIST\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET-TASKS\";\r\nexport const ERROR = \"TodoList/Reducer/ERROR\";\r\nexport const CHANGE_TITLE_LIST = \"TodoList/Reducer/CHANGE_TITLE_LIST\";\r\n\r\n//interface для каждого actionCreator\r\n\r\nexport interface IAddTodolist {\r\n    type : typeof ADD_TODOLIST; //type будет строкой \"TodoList/Reducer/ADD-TODOLIST\"\r\n    newToDolist : any\r\n};\r\n\r\nexport interface IAddTask {\r\n    type : typeof ADD_TASK;\r\n    newTask : any;\r\n    todoListId : string;\r\n};\r\n\r\nexport interface IChangeTask {\r\n    type : typeof CHANGE_TASK;\r\n    updatedTask : any\r\n};\r\n\r\nexport interface IFilterTasks {\r\n    type : typeof FILTER_TASK;\r\n    newFilterValue : string;\r\n    todoListId : string;\r\n};\r\n\r\nexport interface IDeleteTask {\r\n    type : typeof DELETE_TASK;\r\n    taskId : string;\r\n    todoListId : string;\r\n};\r\n\r\nexport interface IDeleteToDoList {\r\n    type : typeof DELETE_TODOLIST;\r\n    todoListId : string;\r\n};\r\n\r\nexport interface ISetToDoList {\r\n    type : typeof SET_TODOLIST;\r\n    todoLists : any[];\r\n};\r\n\r\nexport interface ISetTasks {\r\n    type : typeof SET_TASKS;\r\n    tasks : any[];\r\n    todoListId : string;\r\n};\r\n\r\nexport interface IChangeTitleList {\r\n    type : typeof CHANGE_TITLE_LIST;\r\n    newTitle : string;\r\n    todoListId : string\r\n};\r\n\r\nexport interface IError {\r\n    type: typeof ERROR\r\n};\r\n\r\n// Собираю все interface для reducer\r\nexport type allActionTypes =\r\n    | IAddTodolist\r\n    | IAddTask\r\n    | IChangeTask\r\n    | IFilterTasks\r\n    | IDeleteTask\r\n    | IDeleteToDoList\r\n    | ISetToDoList\r\n    | ISetTasks\r\n    | IChangeTitleList\r\n    | IError\r\n\r\n\r\n","import {api} from \"../Dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    allActionTypes,\r\n    ADD_TASK,\r\n    ADD_TODOLIST,\r\n    CHANGE_TASK,\r\n    CHANGE_TITLE_LIST,\r\n    DELETE_TASK,\r\n    DELETE_TODOLIST,\r\n    FILTER_TASK,\r\n    SET_TASKS,\r\n    SET_TODOLIST,\r\n    IAddTodolist,\r\n    IAddTask,\r\n    IChangeTask,\r\n    IFilterTasks,\r\n    IDeleteTask,\r\n    IDeleteToDoList,\r\n    ISetToDoList,\r\n    ISetTasks,\r\n    IChangeTitleList,\r\n    ERROR\r\n} from \"../types/actions\";\r\nimport {\r\n    ICreateNewToDoList, IResCreateNewTask, IResDeleteTask,\r\n    IResDeleteToDoList,\r\n    IResGetTasks,\r\n    IResGetToDoLists, IResUpdateTitleTask,\r\n    IResUpdateTitleToDoList,\r\n    ITask,\r\n    ITodoList\r\n} from \"./interfaces\";\r\n\r\ninterface IState {\r\n    todoLists: Array<ITodoList>;\r\n    errorMessage: boolean;\r\n}\r\n\r\nconst initialState: IState = {\r\n    todoLists: [],\r\n    errorMessage: false\r\n};\r\n\r\nexport const toDoListReducer = (\r\n    state = initialState,\r\n    action: allActionTypes\r\n) => {\r\n    switch (action.type) {\r\n        // case ERROR:\r\n        //     return {\r\n        //         ...state,\r\n        //         errorMessage: true\r\n        //     };\r\n\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todoLists: [\r\n                    ...state.todoLists,\r\n                    {...action.newToDolist, tasks: [], filterValue: \"All\"}\r\n                ]\r\n            };\r\n\r\n        case CHANGE_TITLE_LIST:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.todoListId) {\r\n                        debugger;\r\n                        return {...todoList, title: action.newTitle};\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case ADD_TASK: //Добавление новых тасок в лист\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.todoListId) {\r\n                        return {...todoList, tasks: [...todoList.tasks, action.newTask]};\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_TASK:\r\n            debugger;\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.updatedTask.todoListId) {\r\n                        return {\r\n                            ...todoList, //\t1 ищем совпадение листа\r\n                            tasks: todoList.tasks.map((task: any) => {\r\n                                if (task.id === action.updatedTask.id) {\r\n                                    return {...task, ...action.updatedTask};\r\n                                } else {\r\n                                    return task;\r\n                                }\r\n                            })\r\n                        };\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case FILTER_TASK:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.todoListId) {\r\n                        return {...todoList, filterValue: action.newFilterValue};\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.todoListId) {\r\n                        return {\r\n                            ...todoList, //\t1 ищем совпадение листа\r\n                            tasks: todoList.tasks.filter((task: any) => {\r\n                                return task.id !== action.taskId;\r\n                            })\r\n                        };\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.filter(list => list.id !== action.todoListId)\r\n            };\r\n        case SET_TODOLIST:\r\n            let todoLists = action.todoLists.map((todoList: ITodoList) => {\r\n                return {\r\n                    ...todoList,\r\n                    tasks: [],\r\n                    filterValue: \"All\"\r\n                };\r\n            });\r\n            return {\r\n                ...state,\r\n                todoLists: todoLists\r\n            };\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((todoList: ITodoList) => {\r\n                    if (todoList.id === action.todoListId) {\r\n                        return {\r\n                            ...todoList,\r\n                            tasks: [...todoList.tasks, ...action.tasks]\r\n                        };\r\n                    } else {\r\n                        return todoList;\r\n                    }\r\n                })\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//ActionCreater\r\nexport const addTodolist = (newToDolist: ITodoList): IAddTodolist => ({\r\n    type: ADD_TODOLIST,\r\n    newToDolist\r\n});\r\nexport const addTask = (newTask: ITask, todoListId: string): IAddTask => ({\r\n    type: ADD_TASK,\r\n    newTask,\r\n    todoListId\r\n});\r\nexport const changeTask = (updatedTask: ITask): IChangeTask => ({\r\n    type: CHANGE_TASK,\r\n    updatedTask\r\n});\r\nexport const filterTasks = (\r\n    newFilterValue: string,\r\n    todoListId: string\r\n): IFilterTasks => ({type: FILTER_TASK, newFilterValue, todoListId});\r\nexport const deleteTask = (\r\n    taskId: string,\r\n    todoListId: string\r\n): IDeleteTask => ({type: DELETE_TASK, taskId, todoListId});\r\nexport const deleteToDoList = (todoListId: string): IDeleteToDoList => ({\r\n    type: DELETE_TODOLIST,\r\n    todoListId\r\n});\r\nexport const setToDoList = (todoLists: Array<ITodoList>): ISetToDoList => ({\r\n    type: SET_TODOLIST,\r\n    todoLists\r\n});\r\nexport const setTasks = (\r\n    tasks: Array<ITask>,\r\n    todoListId: string\r\n): ISetTasks => ({type: SET_TASKS, tasks, todoListId});\r\nexport const changeTitleList = (\r\n    newTitle: string,\r\n    todoListId: string\r\n): IChangeTitleList => ({type: CHANGE_TITLE_LIST, newTitle, todoListId});\r\n\r\n\r\n//thunk\r\nexport const getToDolistThunkCreator = () => (dispatch: Dispatch): void => {\r\n    api.getToDoLists()\r\n        .then((response: Array<ITodoList>) => {\r\n            dispatch(setToDoList(response));\r\n        });\r\n};\r\n\r\nexport const createToDoListThunkCreator = (title: string) => (dispatch: Dispatch): void => {\r\n    api.createToDoList(title)\r\n        .then((response: ICreateNewToDoList) => {\r\n            let todoList = response.data.data.item;\r\n            dispatch(addTodolist(todoList));\r\n        });\r\n};\r\n\r\nexport const deleteToDoListThunkCreator = (todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.deleteToDoList(todoListId)\r\n        .then((response: IResDeleteToDoList) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(deleteToDoList(todoListId));\r\n            }\r\n        });\r\n};\r\n\r\nexport const updateTitleToDoListThunkCreator = (title: string, todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.updateTitleToDoList(title, todoListId)\r\n        .then((response: IResUpdateTitleToDoList) => {\r\n            dispatch(changeTitleList(title, todoListId));\r\n        });\r\n};\r\n\r\nexport const getTasksThunkCreator = (todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.getTasks(todoListId).then((response: IResGetTasks) => {\r\n        let tasks : Array<ITask> = response.data.items;\r\n        dispatch(setTasks(tasks, todoListId));\r\n    });\r\n};\r\n\r\nexport const createTaskThunkCreator = (newTitleTask: string, todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.createTask(newTitleTask, todoListId)\r\n        .then((response: IResCreateNewTask) => {\r\n            if (response.data.resultCode === 0) {\r\n                let newTask = {\r\n                    ...response.data.data.item\r\n                };\r\n                dispatch(addTask(newTask, todoListId));\r\n            }\r\n        });\r\n};\r\n\r\nexport const deleteTaskThunkCreator = (taskId: string, todoListId: string) => (dispatch: Dispatch): void => {\r\n    api.deleteTask(taskId, todoListId)\r\n        .then((response: IResDeleteTask) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(deleteTask(taskId, todoListId));\r\n            }\r\n        });\r\n};\r\n\r\nexport const updateTaskThunkCreator = (updateTask: ITask, taskId: string, todoListId: string) => (dispatch: Dispatch): void => {\r\n    debugger\r\n    api.updateTask(updateTask, taskId, todoListId)\r\n        .then((response: IResUpdateTitleTask) => {\r\n            dispatch(changeTask(response.data.data.item)); //мне не нравиться, что пришла вся таска, а отдаем obj\r\n        });\r\n};\r\n\r\nexport const showError = () => ({type: ERROR});\r\n","import React from \"react\";\r\nimport \"./../App.css\";\r\nimport TodoListFooter from \"./TodoListFooter\";\r\nimport TodoListTasks from \"./TodoListTasks\";\r\nimport TodoListTitle from \"./TodoListTitle\";\r\nimport {connect} from \"react-redux\";\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport {\r\n    filterTasks,\r\n    createTaskThunkCreator, deleteTaskThunkCreator,\r\n    deleteToDoListThunkCreator,\r\n    getTasksThunkCreator, updateTaskThunkCreator,\r\n    updateTitleToDoListThunkCreator\r\n} from \"../Redux/reducer\";\r\nimport {RootState} from \"../Redux/store\";\r\nimport {IObjChangeTask, ITask} from \"../Redux/interfaces\";\r\n\r\ninterface IProps {\r\n    id : string;\r\n    title : string;\r\n    key : string;\r\n    tasks : Array<ITask>;\r\n    filterValue : string;\r\n};\r\n\r\ninterface IMapStateToProps {\r\n    errorMessage : boolean\r\n}\r\n\r\ninterface IDispatchStateToProps {\r\n    filterTasks : (newFilterValue : string, todoListId : string) => void;\r\n    deleteToDoListThunkCreator : (todoListId : string) => void;\r\n    updateTitleToDoListThunkCreator : (newTitle : string, todoListId : string) => void;\r\n    getTasksThunkCreator : (todoListId : string) => void;\r\n    createTaskThunkCreator : (newTitleTask: string, todoListId : string) => void;\r\n    deleteTaskThunkCreator : (taskId : string, todoListId : string) => void;\r\n    updateTaskThunkCreator : (updatedTask : ITask, taskId : string, todoListId : string) => void;\r\n}\r\n\r\nclass ToDoList extends React.Component<IProps & IMapStateToProps & IDispatchStateToProps> {\r\n    componentDidMount() {\r\n        let todoListId = this.props.id;\r\n        this.props.getTasksThunkCreator(todoListId);\r\n    }\r\n\r\n    addTask = (newTitleTask : string) => {\r\n        let todoListId = this.props.id;\r\n        this.props.createTaskThunkCreator(newTitleTask, todoListId);\r\n    };\r\n\r\n    changeTask = (taskId : string, obj : IObjChangeTask) => {\r\n        let todoListId = this.props.id;\r\n        let changeUserTask = this.props.tasks.find((task: ITask) => task.id === taskId);\r\n        if(changeUserTask) {\r\n            let updateTask = {\r\n                ...changeUserTask,\r\n                ...obj\r\n            };\r\n            this.props.updateTaskThunkCreator(updateTask, taskId, todoListId);\r\n        }\r\n    };\r\n\r\n    changeFilter = (newFilterValue : string) => {\r\n        let todoListId = this.props.id;\r\n        this.props.filterTasks(newFilterValue, todoListId);\r\n    };\r\n\r\n    deleteTask = (taskId : string) => {\r\n        let todoListId = this.props.id;\r\n        this.props.deleteTaskThunkCreator(taskId, todoListId);\r\n    };\r\n\r\n    deleteToDoList = () => {\r\n        let todoListId = this.props.id;\r\n        this.props.deleteToDoListThunkCreator(todoListId);\r\n    };\r\n\r\n    changeTitleList = (newTitleList : string) => {\r\n        let todoListId = this.props.id;\r\n        this.props.updateTitleToDoListThunkCreator(newTitleList, todoListId);\r\n    };\r\n\r\n    render() {\r\n        const getFilterTasks = (tasks : Array<ITask>, filter : string) => {\r\n            return tasks.filter((task : ITask) => {\r\n                switch (filter) {\r\n                    case \"All\":\r\n                        return true;\r\n                    case \"Completed\":\r\n                        return task.status === 2;\r\n                    case \"Active\":\r\n                        return task.status === 0;\r\n                }\r\n            });\r\n        };\r\n\r\n        let errorMessage = this.props.errorMessage && \"Error\"; //вывожу ошибку по запросам\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"todoList\">\r\n                    <header className=\"header\">\r\n                        <TodoListTitle\r\n                            title={this.props.title}\r\n                            deleteToDoList={this.deleteToDoList}\r\n                            changeTitleList={this.changeTitleList}\r\n                        />\r\n                        <AddNewItemForm addItem={this.addTask}/>\r\n                    </header>\r\n                    <TodoListTasks\r\n                        tasks={getFilterTasks(this.props.tasks, this.props.filterValue)}\r\n                        changeTask={this.changeTask}\r\n                        deleteTask={this.deleteTask}\r\n                    />\r\n                    <TodoListFooter\r\n                        changeFilter={this.changeFilter}\r\n                        filterValue={this.props.filterValue}\r\n                    />\r\n                </div>\r\n                {errorMessage}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state : RootState) : IMapStateToProps => {\r\n    return {\r\n        errorMessage: state.todoListsPage.errorMessage\r\n    };\r\n};\r\n\r\nconst TodoListContainer = connect(\r\n    mapStateToProps,\r\n    {\r\n        filterTasks, deleteToDoListThunkCreator, updateTitleToDoListThunkCreator,\r\n        getTasksThunkCreator, createTaskThunkCreator,  deleteTaskThunkCreator, updateTaskThunkCreator\r\n    }\r\n)(ToDoList);\r\n\r\nexport default TodoListContainer;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport AddNewItemForm from \"./Component/AddNewItemForm\";\r\nimport TodoList from \"./Component/TodoList\";\r\nimport { connect } from \"react-redux\";\r\nimport { createToDoListThunkCreator, getToDolistThunkCreator} from \"./Redux/reducer\";\r\nimport {RootState} from \"./Redux/store\";\r\nimport {ITodoList} from \"./Redux/interfaces\";\r\n\r\ninterface IStateToProps {\r\n  todoLists : Array<ITodoList>;\r\n}\r\n\r\ninterface IDispatchToProps {\r\n  getToDolistThunkCreator : () => void;\r\n  createToDoListThunkCreator : (title : string) => void;\r\n}\r\n\r\n\r\nclass App extends React.Component<IStateToProps & IDispatchToProps> {\r\n  componentDidMount() {\r\n    this.props.getToDolistThunkCreator()\r\n  }\r\n\r\n  addToDoList = (title : string) => {\r\n    this.props.createToDoListThunkCreator(title)\r\n  };\r\n\r\n  render() {\r\n    let todoLists = this.props.todoLists.map((list: ITodoList) => (\r\n      <TodoList\r\n        id={list.id}\r\n        title={list.title}\r\n        key={list.id}\r\n        tasks={list.tasks}\r\n        filterValue={list.filterValue}\r\n      />\r\n    ));\r\n\r\n    return (\r\n      <div className={'wrapper'}>\r\n        <AddNewItemForm addItem={this.addToDoList} />\r\n        <div className=\"App\">{todoLists}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state : RootState) => {\r\n  return {\r\n    todoLists: state.todoListsPage.todoLists\r\n  };\r\n};\r\n\r\n\r\n\r\nconst ConnectedApp = connect(mapStateToProps, {getToDolistThunkCreator, createToDoListThunkCreator})(App);\r\n\r\nexport default ConnectedApp;\r\n","import {createStore, combineReducers, applyMiddleware} from \"redux\";\r\nimport { toDoListReducer } from \"./reducer\";\r\nimport thunk, {ThunkMiddleware} from \"redux-thunk\";\r\nimport {allActionTypes} from \"../types/actions\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todoListsPage: toDoListReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk as ThunkMiddleware<RootState, allActionTypes>));\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport ConnectedApp from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./Redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ConnectedApp />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}